name: ci

on:
  push:
    branches: [ main, refactoring ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # ← this enables manual runs from GitHub UI
    inputs:
      run_e2e:
        description: 'Run end-to-end tests?'
        required: false
        default: 'true'
jobs:
  check:
    runs-on: ubuntu-latest

    steps:
    - name: ⬇️  Checkout
      uses: actions/checkout@v4

    - name: 🦀  Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.81 # Rust 1.81 is the current stable and required by trunk’s deps
        targets: wasm32-unknown-unknown # host triple + wasm so we can build either way
        components: clippy, rustfmt

    - name: 💾  Cache cargo registry + target dirs
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    # ---------- quality gates ----------
    - name: ✍️  cargo fmt
      run: cargo fmt --all -- --check

    - name: 🔎  cargo clippy
      run: cargo clippy --workspace --all-targets -- -D warnings

    # ---------- build ----------
    - name: 🏗️  cargo build (host)
      run: cargo build --release

    - name: 🌐  cargo build (wasm32)
      run: cargo build --release --target wasm32-unknown-unknown

  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    if: github.event.inputs.run_e2e == 'true'
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🐳 Start backend using quickstart.sh
        run: |
          git clone https://github.com/JohnBasrai/cr8s.git ../cr8s
          cd ../cr8s
          ./scripts/quickstart.sh
          sleep 10

      - name: 🧰 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Install NPM dependencies
        run: npm install

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🚀 Start frontend
        run: docker compose up -d web

      - name: ⏳ Wait for frontend
        run: npx wait-on http://localhost:8080/login

      - name: ✅ Run Playwright tests
        run: npm run test:e2e
